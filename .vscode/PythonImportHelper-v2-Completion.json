[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mail.migrations.0001_initial",
        "description": "mail.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"auth\", \"0012_alter_user_first_name_max_length\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"User\",\n            fields=[\n                (",
        "detail": "mail.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "MailConfig",
        "kind": 6,
        "importPath": "mail.apps",
        "description": "mail.apps",
        "peekOfCode": "class MailConfig(AppConfig):\n    name = 'mail'",
        "detail": "mail.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "mail.models",
        "description": "mail.models",
        "peekOfCode": "class User(AbstractUser):\n    pass\nclass Email(models.Model):\n    user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"emails\")\n    sender = models.ForeignKey(\"User\", on_delete=models.PROTECT, related_name=\"emails_sent\")\n    recipients = models.ManyToManyField(\"User\", related_name=\"emails_received\")\n    subject = models.CharField(max_length=255)\n    body = models.TextField(blank=True)\n    timestamp = models.DateTimeField(auto_now_add=True)\n    read = models.BooleanField(default=False)",
        "detail": "mail.models",
        "documentation": {}
    },
    {
        "label": "Email",
        "kind": 6,
        "importPath": "mail.models",
        "description": "mail.models",
        "peekOfCode": "class Email(models.Model):\n    user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"emails\")\n    sender = models.ForeignKey(\"User\", on_delete=models.PROTECT, related_name=\"emails_sent\")\n    recipients = models.ManyToManyField(\"User\", related_name=\"emails_received\")\n    subject = models.CharField(max_length=255)\n    body = models.TextField(blank=True)\n    timestamp = models.DateTimeField(auto_now_add=True)\n    read = models.BooleanField(default=False)\n    archived = models.BooleanField(default=False)\n    def serialize(self):",
        "detail": "mail.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "mail.urls",
        "description": "mail.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n    path(\"login\", views.login_view, name=\"login\"),\n    path(\"logout\", views.logout_view, name=\"logout\"),\n    path(\"register\", views.register, name=\"register\"),\n    # API Routes\n    path(\"emails\", views.compose, name=\"compose\"),\n    path(\"emails/<int:email_id>\", views.email, name=\"email\"),\n    path(\"emails/<str:mailbox>\", views.mailbox, name=\"mailbox\"),\n]",
        "detail": "mail.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "mail.views",
        "description": "mail.views",
        "peekOfCode": "def index(request):\n    # Authenticated users view their inbox\n    if request.user.is_authenticated:\n        return render(request, \"mail/inbox.html\")\n    # Everyone else is prompted to sign in\n    else:\n        return HttpResponseRedirect(reverse(\"login\"))\n@csrf_exempt\n@login_required\ndef compose(request):",
        "detail": "mail.views",
        "documentation": {}
    },
    {
        "label": "compose",
        "kind": 2,
        "importPath": "mail.views",
        "description": "mail.views",
        "peekOfCode": "def compose(request):\n    # Composing a new email must be via POST\n    if request.method != \"POST\":\n        return JsonResponse({\"error\": \"POST request required.\"}, status=400)\n    # Check recipient emails\n    data = json.loads(request.body)\n    emails = [email.strip() for email in data.get(\"recipients\").split(\",\")]\n    if emails == [\"\"]:\n        return JsonResponse({\n            \"error\": \"At least one recipient required.\"",
        "detail": "mail.views",
        "documentation": {}
    },
    {
        "label": "mailbox",
        "kind": 2,
        "importPath": "mail.views",
        "description": "mail.views",
        "peekOfCode": "def mailbox(request, mailbox):\n    # Filter emails returned based on mailbox\n    if mailbox == \"inbox\":\n        emails = Email.objects.filter(\n            user=request.user, recipients=request.user, archived=False\n        )\n    elif mailbox == \"sent\":\n        emails = Email.objects.filter(\n            user=request.user, sender=request.user\n        )",
        "detail": "mail.views",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 2,
        "importPath": "mail.views",
        "description": "mail.views",
        "peekOfCode": "def email(request, email_id):\n    # Query for requested email\n    try:\n        email = Email.objects.get(user=request.user, pk=email_id)\n    except Email.DoesNotExist:\n        return JsonResponse({\"error\": \"Email not found.\"}, status=404)\n    # Return email contents\n    if request.method == \"GET\":\n        return JsonResponse(email.serialize())\n    # Update whether email is read or should be archived",
        "detail": "mail.views",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "mail.views",
        "description": "mail.views",
        "peekOfCode": "def login_view(request):\n    if request.method == \"POST\":\n        # Attempt to sign user in\n        email = request.POST[\"email\"]\n        password = request.POST[\"password\"]\n        user = authenticate(request, username=email, password=password)\n        # Check if authentication successful\n        if user is not None:\n            login(request, user)\n            return HttpResponseRedirect(reverse(\"index\"))",
        "detail": "mail.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "mail.views",
        "description": "mail.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)\n    return HttpResponseRedirect(reverse(\"index\"))\ndef register(request):\n    if request.method == \"POST\":\n        email = request.POST[\"email\"]\n        # Ensure password matches confirmation\n        password = request.POST[\"password\"]\n        confirmation = request.POST[\"confirmation\"]\n        if password != confirmation:",
        "detail": "mail.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "mail.views",
        "description": "mail.views",
        "peekOfCode": "def register(request):\n    if request.method == \"POST\":\n        email = request.POST[\"email\"]\n        # Ensure password matches confirmation\n        password = request.POST[\"password\"]\n        confirmation = request.POST[\"confirmation\"]\n        if password != confirmation:\n            return render(request, \"mail/register.html\", {\n                \"message\": \"Passwords must match.\"\n            })",
        "detail": "mail.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project3.asgi",
        "description": "project3.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "project3.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '05$4$3aew(8ywondz$g!k4m779pbvn9)euj0zp7-ae*x@4pxr+'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "SECRET_KEY = '05$4$3aew(8ywondz$g!k4m779pbvn9)euj0zp7-ae*x@4pxr+'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'mail',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'mail',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'mail',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'mail',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nMIDDLEWARE = [",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'project3.urls'",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "ROOT_URLCONF = 'project3.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "WSGI_APPLICATION = 'project3.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nAUTH_USER_MODEL = 'mail.User'",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nAUTH_USER_MODEL = 'mail.User'\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'mail.User'\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "project3.settings",
        "description": "project3.settings",
        "peekOfCode": "STATIC_URL = '/static/'",
        "detail": "project3.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "project3.urls",
        "description": "project3.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('mail.urls'))\n]",
        "detail": "project3.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project3.wsgi",
        "description": "project3.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "project3.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project3.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc",
        "detail": "manage",
        "documentation": {}
    }
]